package ${package}.service.${moduleName}.impl;


import ${package}.${moduleName}.dto.${className}QueryDTO;
import ${package}.${moduleName}.dto.${className}InsertDTO;
import ${package}.${moduleName}.dto.${className}UpdateDTO;
import ${package}.${moduleName}.vo.${className}VO;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.service.${moduleName}.${className}Service;
import org.springframework.stereotype.Service;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import lombok.extern.slf4j.Slf4j;

import java.util.List;


@Service
@Slf4j
public class ${className}ServiceImpl implements ${className}Service {

    @Autowired
        ${className}Mapper ${classname}Mapper;


    @Override
    public List<${className}> queryListForPage(${className}QueryDTO ${classname}QueryDTO) {
        return ${classname}Mapper.queryListForPage(${classname}QueryDTO);
    }

    @Override
    public ${className} queryInfo(${className}QueryDTO ${classname}QueryDTO) {
        return ${classname}Mapper.queryInfo(${classname}QueryDTO);
    }

    @Override
    public Integer insert(${className}InsertDTO ${classname}InsertDTO) {
        ${className} ${classname} =new ${className}();
        BeanUtils.copyProperties(${classname}InsertDTO, ${classname});
        return ${classname}Mapper.insert(${classname});
    }

    @Override
    public Integer insertSelective(${className} ${classname}) {
        return ${classname}Mapper.insertSelective(${classname});
    }

    @Override
    public Integer updateById(${className}UpdateDTO ${classname}UpdateDTO) {
        ${className} ${classname} =new ${className}();
        BeanUtils.copyProperties(${classname}UpdateDTO, ${classname});
        return ${classname}Mapper.updateById(${classname});
    }


    @Override
    public Integer queryCount(${className}QueryDTO ${classname}QueryDTO) {
        return ${classname}Mapper.queryCount(${classname}QueryDTO);
    }

    @Override
    public List<${className}> selectListByPage(${className} info, Integer offset, Integer limit) {
        return ${classname}Mapper.selectListByPage(info, offset, limit);
    }

    @Override
    public List<${className}> batchQueryByPrimaryKey(@Param("ids") List<Integer> ids) {
        return ${classname}Mapper.batchQueryByPrimaryKey(ids);
    }

    @Override
    public int batchDeleteByPrimaryKey(@Param("ids") List<Integer> ids) {
        return ${classname}Mapper.batchDeleteByPrimaryKey(ids);
    }

    @Override
    public int batchInsert(List<${className}> list) {
        return ${classname}Mapper.insertBatch(list);
    }
}
