package ${package}.${moduleName}.mapper;

import org.apache.ibatis.annotations.Param;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.dto.${className}QueryDTO;
import ${package}.${moduleName}.dto.${className}InsertDTO;
import ${package}.${moduleName}.dto.${className}UpdateDTO;
import ${package}.${moduleName}.vo.${className}VO;

import java.util.List;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
public interface ${className}Mapper {

    /**
     * 分页获取 ${className} 列表
     *
     * @param ${classname}QueryDTO
     * @return
     */
    List<${className}> queryListForPage(${className}QueryDTO ${classname}QueryDTO);

    /**
     * 查询 ${className} 详情
     *
     * @param ${classname}QueryDTO
     * @return
     */
        ${className} queryInfo(${className}QueryDTO ${classname}QueryDTO);

    /**
     * 新增 ${className} 数据
     *
     * @return
     */
    Integer insert(${className} ${classname});

    /**
     * 动态条件插入 ${className} 数据
     * @return
     */
    Integer insertSelective(${className} ${classname});

    /**
     * 根据主键id更新 ${className} 数据
     *
     * @return
     */
    Integer updateById(${className} ${classname});

    /**
     * 根据条件查询 ${className} 数据总数
     * @param ${classname}QueryDTO
     * @return
     */
    Integer queryCount(${className}QueryDTO ${classname}QueryDTO);


    /**
     * 条件筛选并分页查询 ${className} 列表数据
     * @param offset
     * @param limit
     * @return
     */
    List<${className}> selectListByPage(@Param("info") ${className} info, @Param("offset") Integer offset, @Param("limit") Integer limit);

    /**
     * 根据主键更新 ${className} 数据
     * @return
     */
    int updateByPrimaryKeySelective(${className} info);

    /**
     * 根据id列表批量删除 ${className} 数据
     * @param ids
     * @return
     */
    int batchDeleteByPrimaryKey(@Param("ids") List<Integer> ids);

    /**
     * 根据主键批量查询 ${className} 数据
     *
     * @param ids
     * @return
     */
    List<${className}> batchQueryByPrimaryKey(@Param("ids") List<Integer> ids);

    /**
     * 批量插入 ${className}  数据
     * @param list
     * @return
     */
    int batchInsert(List<${className}> list);
}
